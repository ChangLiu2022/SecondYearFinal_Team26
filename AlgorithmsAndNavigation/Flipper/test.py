import numpy as np
from matplotlib import pyplot as plt
import warper
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
import math

def pointTurner(input,theta):
    target = np.array([[0,0]])
    for i in range(input.shape[0]):
        newx = math.cos(math.radians(theta))*input[i][0]-math.sin(math.radians(theta))*input[i][1]
        newy = math.sin(math.radians(theta))*input[i][0]+math.cos(math.radians(theta))*input[i][1]
        target = np.vstack([target, [[newx,newy]]])
    target = target[1:(target.shape[0]-1),:]
    return target

inputstr1 = "005101d9005201d8005201d8005201d8005201d8005101d8005201d8005201d8005201d8005201d8005201d8005201d8005201d8005201d8005201d8005201d8005201d8005101d8005201d8005201d8005201d8005201d8005201d8005201d8005101d8005201d8005201d8005101d7005101d7005101d7005101d7005101d7005101d7005101d7005101d7005101d7005201d6005201d6005201d6005201d6005201d5005201d5005101d4005101d4005101d4005101d4005201d3005201d3005201d3005101d4005101d4005101d4005101d4005101d4005201d5005201d5005201d5005201d5005101d4005101d4005101d4005101d4005201d4005201d4005101d4005201d4005201d4005201d4005201d4005201d4005101d4005201d4005201d4005101d4005201d4005201d4005101d4005201d4005101d3005201d3005101d3005101d3005201d3005101d3005101d3005201d3005101d3005101d3005101d4005101d4005201d4005101d4005201d4005201d4005101d4005201d4005201d4005101d4005201d4005201d4005201d3005201d3005101d3005101d3005101d3005101d3005201d3005101d3005101d3005201d3005201d3005101d3005201d3005201d2005201d2005201d2005201d2005201d2005201d3005101d3005201d2005201d2005201d2005201d2005201d2005201d2005201d9005201d90042014d0051014d0062014d0072014d0081014d0092014d0022014e0022014e00b2014e00d1014e0012014f00c1014f00e2014f00f1014f0102014f0112014f0122015000070151000b0151000e015100a1015100ce015100df0151013101510142015101520151015a0151016401510162015201720152018201530192015301a1015301b2015301c2015300a1015401d2015401e1015500b2015700c1015b01e1015b01e1015b01d2016000cc016101cc016100e2016301c2016500f1016701b201690102016a0112016d01a1016e0108017101220171018f017101920171013201730182017401420175015201750172017501910175016201760132017701820177014201790162017901720179000701810008018100120186000f01910022019d001801a1003201aa003201aa004201b8003901c1005201ca004501d10032014d0042014d0051014d0062014d0072014d0081014d0092014d0022014e00a1014e00b2014e00d1014e0012014f00c1014f00e2014f00f1014f0102014f0112014f0122015000070151000b0151000e015100a1015100ce015100df0151013101510142015101520151015a0151016401510164015101720152018201530192015301a1015301b2015301c2015300a1015401d2015401e1015500b2015700c1015b01e1015b00d2015f01d2016000cc016101cc0161006101dc0032014d01c2015301d1015301e2015300b2015500c2015901e2015a00d1015d01d1015f00d0016100e2016101c9016101c2016400f201650101016901b2016901b201690112016d01a2016d0122016f01920170010e017101110171018901710131017201420173018101730131017501520175016101750172017501910175014101770182017701620179000701810008018100110184001001910022019c001a01a1003201a8002b01b1004101b7003a01c1005201c9004501d1006101dc00a2015301c2015301c2015301e2015300b2015500c2015901e2015a00d1015d01d1015f00cf016100e2016101c9016101c2016400f201650101016901b201690112016d01a2016d0122016f010e01710111017101890171019201710131017201810173014101740131017501520175016101750172017501910175014101770182017701620179000701810008018100080181001001910022019c001a01a1003201a8002901b1004101b7003a01c1005201c9004501d100a2015301c2015301d1015301e2015300b2015500c2015901e1015b00d1015d01d1015f00cf016100e2016101c9016101c2016400f201650101016901b201690112016d01a2016d0122016f01210170010e0171011101710189017101920171019201710181017301410174015201750161017501720175019101750141017701820177006201d900a201530191016f011a0171012c017101410171017a0171018201710194017101320173015101730162017301720173019201730142017501820175016201770012018000080181000801810012019100210198001e01a1003201a5002e01b1002e01b1003d01c1005101c5004801d1006101d90191016e0132016f011c0171012d01710142017101780171018201710172017201320173015201730162017301420175017201750181017500110180000a01810012019100220198001d01a1003201a4002e01b1004101b3003e01c1005101c4004901d1006101d80191016e0132016f011c0171011c017101420171014c01710155017101580171017501710182017101a001710172017201320173015201730162017301420175017201750181017500110180000a01810012019100210197001f01a1003201a4002e01b1004101b3003f01c1005101c4004a01d1006101d80192016e0131016f011d0171012f017101410171014c0171015501710155017101740171018201710152017201720172013201730162017301420175017201750182017500120180000a01810013019100220197001e01a1003201a4002f01b1004201b3003f01c1005201c4004a01d1006201d80191016e0132016f011c017101300171014201710155017101750171017801710182017101720172013201730152017301520173"
inputstr2 = "0057424201a2017301b1017301c2017301d2017301e1017301f2017302020173011101740132017401410174015201740162017401710174018201740212017400d10175010101750122017501c2017901d2017e01cd018101e1018500d1018d01f1018d00cd019101ef019102020196020701a1021201a1022101ae021801b1021101b2020201b5020201b501d201b701e201b701c201b800f201b9010201b9011101b9012201b9013201b9014101b9015201b9016201b9017101b9018201b9019201b901a101b901b201b90192017301a2017301b1017301c2017301d2017301e1017301f2017302020173011101740132017401410174015201740162017401710174018201740212017400d1017500d101750122017501c201790021017d01d2017e01cd018101e1018500d1018d01f1018d00cd019101ef01910202019600c10197020701a1021201a1022101ae021801b1021101b2020201b501f201b601d201b701e201b701c201b800f201b9010201b9011101b9012201b9013201b9014101b9015201b9016201b9017101b9018201b9019201b9019201b901b201b9010001c10192017301b1017301c2017301d2017301e1017301f201730202017301620174017101740182017401a101740212017400d10175010101750122017501310175014201750152017501c201790021017d01d2017f01cc0181019201c101920173017201740181017401a2017400d2017501020175012201750132017501320175015201750192017701c101790021017e01d2017f01cb018101e2018500d2018d01f2018d00cd019101ee01910201019600c1019800b501a1020701a1021101a1022201ad021901b1021101b3020201b501e201b701f201b701d201b8015101b9016201b9017201b9018101b9019201b901a201b901b101b901c201b9010201ba012201ba012201ba014101ba011201bb00f201bd00f501c1011901c1011c01c1011e01c1011f01c1012201c1012401c1012501c1012801c1012a01c1012b01c1012e01c1013001c1013101c1013401c1013601c1013701c1013a01c1013c01c1013d01c1014001c1014201c1014301c1014601c1014801c1014901c1014c01c10101017401220174013101740131017401520174017201740182017400d2017501c201790022017d01d2017e01ce018101e2018501f1018c00d2018d00cc019101ef01910202019600c2019700b601a1020801a1021201a1022101ad021701b1021201b3020101b501d201b701e101b701f201b7010101b9012201b9013101b9014201b9015201b9016101b9017201b9018201b9018201b901a201b901b201b901c101b9011201ba00f101bd00f601c100f801c100f901c100fc01c100fe01c100ff01c1010201c1010401c1010501c1010801c1010a01c100f201be0162017400fc01c100fe01c100ff01c1010101ba011201ba00f101be00f401c100f601c100f701c100fa01c100fc01c100fd01c1010001c1010201c1010301c1010301c1010801c1010901c1010c01c1010201ba011201ba012101ba00f201be00f201c100f301c100f601c100f801c100f901c1010b01c1010e01c1011001c1011101c1011401c1010201ba011201ba012101ba00f201be00f201c100f301c100f601c100f801c1010e01c1011001c1011101c1011401c1011601c1010101ba011201ba012201ba012201ba00f101be00f101c100f401c100f601c100f701c100fa01c1010e01c1010f01c1011201c1011401c1010201ba011201ba00f201be00f201c100f301c100f601c100f801c100f901c100fc01c1010801c1010a01c1010b01c1010e01c1011101c100f201be00fb01c100fe01c1010001c1010101c1010601c1010701c100f101be00f101bd00f101bd00f201bd00f101bd00f101bd00f101be010201ba011101ba00f201be00f401c100f501c100f801c100fa01c100fb01c100fe01c1010001c1010101c1010401c1010601c1010701c1010a01c1010c01c1010d01c1010201ba011201ba012101ba013201ba00f201bf00f201c1011001c1011101c1011401c1011601c1011701c1010101ba010101ba012201ba013101ba014201ba00f201bf00f101c1011501c1011801c1011a01c1010c01c100f201be"
inputstr = inputstr2
print(len(inputstr)/8)
target = np.array([[0,0]])
for i in range(int(len(inputstr)/8)):
    print(inputstr[i*8:(i*8+8)])
    x = int(inputstr[i*8:(i*8+4)],16)
    print(x)
    y = 480-int(inputstr[(i*8+5):(i*8+8)],16)
    print(y)

    target = np.vstack([target, [[x,y]]])
target = target[1:(target.shape[0]-1),:]
ax, ay = target.T
plt.xlim([0, 640])
plt.ylim([0, 480])
plt.scatter(ax,ay)
plt.savefig('plt_output_images/plt_warped_original.png')
plt.show()
deg = -90
outp = pointTurner(warper.warpRoutine(target),deg)
avx, avy = outp.T
plt.scatter(avx,avy)
plt.savefig('plt_output_images/plt_warped_original_rotate.png')
plt.show()

warper.clusterer(ax,ay,0.22)
allpoints = np.array([0,0])
xxx,yyy = warper.imageRoutine(target,1000,1000)


for l in range(max(len(xxx),len(yyy))):
    allpoints = np.vstack([allpoints,[xxx.T[l],yyy.T[l]]])
allpoints = allpoints[1:(allpoints.shape[0]-1),:]
print(allpoints)
# plt.scatter(allpoints.T[0],allpoints.T[1])
# plt.show()

inputstr = inputstr1
print(len(inputstr)/8)
target = np.array([[0,0]])
for i in range(int(len(inputstr)/8)):
    print(inputstr[i*8:(i*8+8)])
    x = int(inputstr[i*8:(i*8+4)],16)
    print(x)
    y = 480-int(inputstr[(i*8+5):(i*8+8)],16)
    print(y)

    target = np.vstack([target, [[x,y]]])
target = target[1:(target.shape[0]-1),:]
ax, ay = target.T
# plt.xlim([0, 640])
# plt.ylim([0, 480])
# plt.scatter(ax,ay)
# plt.savefig('plt_output_images/plt_warped_original.png')
# plt.show()

warper.clusterer(ax,ay,0.22)

xxx,yyy = warper.imageRoutine(target,500,500)

for l in range(max(len(xxx),len(yyy))):
    allpoints = np.vstack([allpoints,[xxx.T[l],yyy.T[l]]])

print(allpoints)
cx = allpoints.T[0]
cy = allpoints.T[1]
warper.clusterer(cx,cy,0.2,True)
